import sys
from typing import IO, Any, Tuple, overload
from typing_extensions import Literal, TypedDict

class _PreferredScheme(TypedDict):
    home: str
    prefix: str
    user: str

def get_config_var(name: str) -> str | None: ...
@overload
def get_config_vars() -> dict[str, Any]: ...
@overload
def get_config_vars(arg: str, *args: str) -> list[Any]: ...
def get_scheme_names() -> Tuple[str, ...]: ...

if sys.version_info >= (3, 10):
    def get_default_scheme() -> str: ...
    def get_preferred_scheme(key: Literal["home", "prefix", "user"]) -> str: ...
    def _get_preferred_schemes() -> _PreferredScheme: ...

else:
    def _get_default_scheme() -> str: ...  # undocumented

def get_path_names() -> Tuple[str, ...]: ...
def get_path(name: str, scheme: str = ..., vars: dict[str, Any] | None = ..., expand: bool = ...) -> str: ...
def get_paths(scheme: str = ..., vars: dict[str, Any] | None = ..., expand: bool = ...) -> dict[str, str]: ...
def get_python_version() -> str: ...
def get_platform() -> str: ...
def is_python_build(check_home: bool = ...) -> bool: ...
def parse_config_h(fp: IO[Any], vars: dict[str, Any] | None = ...) -> dict[str, Any]: ...
def get_config_h_filename() -> str: ...
def get_makefile_filename() -> str: ...
